#BlueJ class context
comment0.params=args
comment0.target=void\ main(java.lang.String[])
comment0.text=\n\ Methode\ um\ das\ Interaktive\ Programm\ zu\ starten<br>\n\ Als\ Input\ wird\ die\ Standardeingabe\ benutzt<br>\n\ \n\ @param\ args\n\ \ \ \ \ \ \ \ \ \ \ \ Programmargumente,\ die\ nicht\ ausgewertet\ werden\n
comment1.params=
comment1.target=ArtikelDialog()
comment1.text=\n\ Konstruktor\ fuer\ einen\ Artikeldialog<br>\n\ Dieser\ Konstruktor\ erschafft\ ein\ neues,\ interaktive\ Dialogobjekt\ zur\n\ Kommunikation\ mit\ Artikel-Objekten\n\ <p>\n\ Eingaben\ fuer\ die\ Kommunikation\ werden\ von\ der\ Sandardeingabe\n\ gelesen<br>\n\ Ausgaben\ werden\ auf\ der\ Standardausgabe\ ausgegeben\n\ <p>\n\ Es\ wird\ zu\ Beginn\ kein\ Objekt\ angelegt<br>\n
comment2.params=art\ in\ out
comment2.target=ArtikelDialog(Artikel,\ java.io.InputStream,\ java.io.PrintStream)
comment2.text=\n\ Konstruktor\ fuer\ einen\ Artikel\ Dialog<br>\n\ Dieser\ Konstruktor\ erschafft\ ein\ neues,\ interaktive\ Dialogobjekt\ zur\n\ Kommunikation\ mit\ Artike-Objekten\n\ <p>\n\ \n\ Dieser\ Konstruktor\ ermoeglicht\ es\ ausserdem,\ ein\ zuvor\ angelegtes\n\ Artikelobjekt\ in\ den\ neuen\ Dialog\ zu\ importieren<br>\n\ Das\ uebergebene\ Objekt\ darf\ auch\ null\ sein,\ falls\ kein\ Objekt\n\ importiert\ werden\ soll\n\ <p>\n\ \n\ Es\ muss\ ausserdem\ ein\ {@link\ InputStream}\ uebergeben\ werden,\ von\ dem\n\ Eingaben\ gelesen\ werden<br>\n\ Ist\ der\ uebergebene\ {@link\ InputStream}\ null,\ so\ wird\ eine\n\ {@link\ IllegalArgumentException}\ geworfen<br>\n\ \n\ Es\ muss\ ausserdem\ ein\ {@link\ PrintStream}\ uebergeben\ werden,\ auf\ dem\n\ die\ Ausgabe\ erfolgt<br>\n\ Ist\ der\ uebergebene\ {@link\ PrintStream}\ null,\ so\ wird\ eine\n\ {@link\ IllegalArgumentException}\ geworfen\n\ \n\ @param\ art\n\ \ \ \ \ \ \ \ \ \ \ \ Artikel,\ der\ durch\ den\ Dialog\ bearbeitbar\ werden\ soll\n\ @param\ in\n\ \ \ \ \ \ \ \ \ \ \ \ Eingabequelle,\ von\ der\ gelesen\ wird\n\ @param\ out\n\ \ \ \ \ \ \ \ \ \ \ \ Ausgabequelle\ f\u00FCr\ Ergebnisse\n\ @throws\ IllegalArgumentException\n\ \ \ \ \ \ \ \ \ \ \ \ \ wenn\ der\ uebergebene\ Ein-\ oder\ Ausgabe-Stream\ null\ ist\n
comment3.params=
comment3.target=void\ run()
comment3.text=\n\ Methode,\ die\ dieses\ Object\ in\ den\ Leesezyklus\ versetzt<br>\n\ Diese\ Methode\ blockiert\ den\ aufrufenden\ Thread,\ bis\ die\ Interaktion\n\ beendet\ wird.<br>\n\ Exceptions,\ sowie\ Errors\ f\u00FChren\ NICHT\ zum\ Verlassen\ der\ Methode<br>\n
comment4.params=ex
comment4.target=void\ processException(java.lang.Throwable)
comment4.text=\n\ Diese\ Methode\ uebernimmt\ die\ Behandlung\ jeglicher\ Fehler,\ die\n\ waehrend\ der\ Ausfuehrung\ auftreten\ koennen<br>\n\ Zusaetzlich\ zur\ Fehlerbehandlung\ wird\ der\ InputStream\ IN\ um\ eine\n\ Zeile\ nach\ vorne\ gesetzt,\ um\ auf\ Eingabefehler\ zu\ reagieren<br>\n\ \n\ @param\ ex\n\ \ \ \ \ \ \ \ \ \ \ \ Zu\ behandelnder\ Fehler\n
comment5.params=
comment5.target=boolean\ processNext()
comment5.text=\n\ Diese\ Methode\ gibt\ zunaechst\ den\ aktuellen\ Status\ des\ gemanagten\n\ Objekts\ aus.\ <br>\n\ Danach\ wird\ eine\ Liste\ mit\ allen\ verfuegbaren\ Aktionen\ angezeigt\n\ <p>\n\ Es\ wird\ eine\ Zahl\ eingelesen,\ die\ eindeutig\ einer\ Aktion\ zugeordnet\n\ wird<br>\n\ Kann\ die\ Zahl\ keiner\ Aktion\ zugeordnet\ werden,\ so\ wird\ eine\n\ {@link\ UnsupportedOperationException}\ geworfen\n\ <p>\n\ Abgesehen\ von\ der\ "Anlegen"-\ bzw.\ "Ende"-Opperation,\ muss\ ein\ Objekt\n\ vorhanden\ sein,\ bevor\ eine\ andere\ Methode\ aufgerufen\ werden\n\ darf.<br>\n\ Wird\ versucht\ eine\ Methode\ mit\ Ausnahme\ der\ genannten\ aufzurufen,\ so\n\ wird\ eine\ {@link\ UnsupportedOperationException}\ geworfen\n\ <p>\n\ Der\ R\u00FCckgabewert\ dieser\ Funktion\ sagt\ aus,\ ob\ die\ "Ende"-Funktion\n\ gew\u00E4hlt\ wurde<br>\n\ Wenn\ diese\ Methode\ true\ zur\u00FCckliefert,\ soll\ der\ Dialog\ mit\ dem\n\ Benutzer\ beendet\ werden\n\ \n\ @return\ ob\ der\ Dialog\ beendet\ werden\ soll\n\ @throws\ UnsupportedOperationException\n\ \ \ \ \ \ \ \ \ \ \ \ \ wenn\ die\ gew\u00E4hlte\ Opperation\ nicht\ zugeordnet\ werden\n\ \ \ \ \ \ \ \ \ \ \ \ \ kann,\ oder\ das\ Objekt\ zuerst\ initialisiert\ werden\ muss.\n
comment6.params=
comment6.target=java.lang.String\ getLine()
comment6.text=\n\ Diese\ Methode\ dient\ dazu,\ einen\ nicht\ leeren\ Text\ aus\ ev.\ mehreren\n\ Worten\ einzulesen<br>\n\ Diese\ Methode\ liest\ solange\ Text\ von\ der\ Eingabe\ ein,\ bis\ ein\ nicht\n\ leerer\ Text\ gefolgt\ von\ einem\ Linefeed/CarrageReturn\ (/r/n)\n\ eingelesen\ wurde<br>\n\ \n\ @return\ eine\ nicht\ leere\ Textzeile,\ die\ von\ der\ Eingabe\ eingelesen\n\ \ \ \ \ \ \ \ \ wurde\n
comment7.params=
comment7.target=int\ getInt()
comment7.text=\n\ Diese\ Methode\ dient\ dazu,\ einen\ Integer\ von\ der\ Eingabe\n\ einzulesen<br>\n\ Wird\ auf\ dem\ Input\ kein\ Integer\ gesendet,\ sondern\ undefinierte\n\ andere\ Zeichen,\ so\ wird\ die\ Anfrage\ nach\ einer\ Zahl\ wiederholt<br>\n\ \n\ @return\ eine\ ganze\ Zahl\n
comment8.params=art
comment8.target=void\ printOptions(Artikel)
comment8.text=\n\ Diese\ Methode\ dient\ dazu,\ eine\ Liste\ aller\ Funktionen\ auf\ der\n\ Ausgabe\ auszugeben,\ die\ gewaehlt\ werden\ koennen<br>\n\ Ausserdem\ wird\ jeder\ Aktion\ eine\ Nummer\ zugewiesen,\ mit\ der\ diese\n\ Methode\ bei\ der\ Methodenauswahl\ gewaehlt\ werden\ kann<br>\n\ Zuvor\ wird\ der\ Status\ des\ Objektes\ ausgegeben,\ oder\ eine\ Meldung,\n\ falls\ noch\ kein\ Objekt\ angelegt\ wurde<br>\n\ \n\ @param\ art\n\ \ \ \ \ \ \ \ \ \ \ \ Artikel\ dessen\ Status\ ausgegeben\ werden\ soll\n
numComments=9
